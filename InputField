package com.play.practice;

import java.util.Arrays;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import com.microsoft.playwright.Browser;
import com.microsoft.playwright.BrowserContext;
import com.microsoft.playwright.BrowserType;
import com.microsoft.playwright.Page;
import com.microsoft.playwright.Playwright;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class Play {
	private static Playwright play;
	private static Browser browser;
	private static Page page;
	private static BrowserContext bContext;
		
	@BeforeAll
	public static void SetupBro() {
		play = Playwright.create();
		browser = play.chromium().launch( new BrowserType.LaunchOptions().setHeadless(false)
				.setArgs(Arrays.asList("--start-maximized","--no-sandbox","--disable-extensions","--disable-gpu")));
		play.selectors().setTestIdAttribute("data-test");
	}
	@BeforeEach
	public void setup() {
		//for maximizing browser
		bContext = browser.newContext(new Browser.NewContextOptions().setViewportSize(null));
		page = bContext.newPage();
	}
 
	@AfterAll
	public static void teardown() {
		  if (browser != null) browser.close();
		  if (play != null) play.close();
  //we can also use this 2 following comments
	//	browser.close();
	//	play.close();
	}
	
	@AfterEach
	void closeContext() {
		bContext.close();
	}
 	
		@DisplayName("Interating with Input Fields")
		@Nested
		class Input {
			
			@BeforeEach
			void OpenPage() {
				page.navigate("https://practicesoftwaretesting.com/contact");
			}
			
			@DisplayName("Input")
			@Test
			void fieldValues() {
				var FirstName = page.getByLabel("First Name"); 
				var LastName = page.getByLabel("Last Name"); 
				var Email = page.getByLabel("Email address"); 
				var Message = page.getByLabel("Message");
				
				FirstName.fill("Jan");
				LastName.fill("ani");
				Email.fill("Jan@gmail.com");
				Message.fill("Interacting");
				
				assertThat(FirstName).hasValue("Jan");
				assertThat(LastName).hasValue("ani");
				assertThat(Email).hasValue("Jan@gmail.com");
				assertThat(Message).hasValue("Interacting");
			}
		}		
	
}
